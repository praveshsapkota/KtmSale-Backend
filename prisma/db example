/////////////////////////////////////////////////
Music streaming service
EmptyMusic streaming serviceRentals platformSaasUrl shortener
// Schema for a fictional music streaming service
// This service contains songs, albums, artists & playlists, and tracks user interactions with each of them

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  email        String        @unique
  interactions Interaction[]
  playlists    Playlist[]
}

model Interaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songId    String?
  userId    String?
  isLiked   Boolean  @default(false)
  playCount Int
  song      Song?    @relation(fields: [songId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Song {
  id           String        @id @default(uuid())
  interactions Interaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  album        Album?        @relation(fields: [albumId], references: [id])
  albumId      String?
  artist       Artist        @relation(fields: [artistId], references: [id])
  artistId     String
  length       Float
  track        Int?
  lyrics       String?
  playlist     Playlist[]
  fileUrl      String
}

model Artist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  albums    Album[]
  songs     Song[]
}

model Album {
  id        String   @id @default(uuid())
  songs     Song[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artists   Artist[]
  name      String
  cover     String
}

model Playlist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  songs     Song[]
  name      String
}


///////////////////...............................


Rentals platform
EmptyMusic streaming serviceRentals platformSaasUrl shortener
// Schema for a fictional hotel
// This hotel tracks rooms, user reservations & reviews

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  name         String
  reservations Reservation[]
  reviews      Review[]
}

model Reservation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime
  price     Int
  total     Int
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?
}

model Room {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  reservations       Reservation[]
  totalOccupancy     Int           @default(5)
  totalBedrooms      Int           @default(5)
  totalBathrooms     Int           @default(5)
  summary            String?
  address            String
  isSmoking          Boolean       @default(false)
  hasTV              Boolean       @default(true)
  hasAirConditioning Boolean       @default(true)
  hasHeating         Boolean       @default(true)
  hasWIFI            Boolean       @default(true)
  price              Int
  media              Media[]

}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Media {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?
  fileName  String
}




///////////////////////////////...............................


Url shortener
EmptyMusic streaming serviceRentals platformSaasUrl shortener
// Schema for a simple URL shortener
// This schema tracks short links by associating them to a user

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Link {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  shortUrl  String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String
  links     Link[]
}

....................................................................................................


Saas
EmptyMusic streaming serviceRentals platformSaasUrl shortener
// Schema for an identity service for a SaaS
// This service tracks existing users & their accounts, as well as invites for users who haven't joined yet

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
}

model Account {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  invites              Invite[]
  users                User[]
  stripeCustomerId     String
  stripeSubscriptionId String
  referrer             String?
  isActive             Boolean

}

model Invite {
  id        String   @id @default(uuid())
  dateSent  DateTime @default(now())
  email     String
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
  isValid   Boolean  @default(true)
}

Create Schema
