  generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["nApi"] 
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }
datasource db {
  provider = "postgresql"
  url      = "postgresql://ethan:qwerty@localhost:54321/postgresdb?schema=public"
}




model ProductImage {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  image     String
  productId String
  updatedAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id])

  @@index([productId], name: "ProductImage_ibfk_1")
}

model User {
  id                     String        @id @default(cuid())
  name                   String
  email                  String        @unique
  emailConfirmationToken String?
  googleId               String?       @unique
  facebookId             String?
  hasVerifiedEmail       Boolean?
  password               String?
  resetToken             String?
  resetTokenExpiry       Float?
  billing                String?
  address                String?
  role                   User_role     @default(USER)
  status                 User_status   @default(INACTIVE)
  CartItem               CartItem[]
  Product                Product[]
  // hasCompletedOnboarding Boolean       @default(false)
  // OrderDetail            OrderDetail[]
}

enum User_role {
  USER
  ADMIN
  MANAGER
}

enum User_status {
  INACTIVE
  ACTIVE
  BLOCKED
}



model CartItem {
  id       String @id
  item     String
  quantity Int
  userId   String
  User     User   @relation(fields: [userId], references: [id])
  productId String?
  Product  Product? @relation(fields: [productId], references: [id])
  // orderId  String
  // orderDetails  OrderDetail? @relation(fields: [orderId], references: [id])
  // @@index([item], name: "item")
  // @@index([user], name: "user")
}

model Category {
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  updatedAt DateTime  @default(now())
  subCatagory  sub_catagory[]
  // parent    String
}

model sub_catagory {
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  name      String
  parent    String
  slug      String    @unique
  updatedAt DateTime  @default(now())
  catagoryid String
  Catagory   Category @relation(fields: [catagoryid], references: [id])
  Producs   Product[]
}

model Product {
  id            String         @id @default(cuid())
  name          String
  price         Int
  sub_catagory  String
  sku           String         @unique
  description   String
  unit          String
  updatedAt     DateTime       @default(now())
  discount      Int?
  salePrice     Int
  userid        String
  Category      sub_catagory     @relation(fields: [sub_catagory], references: [id])
  User          User           @relation(fields: [userid], references: [id])
  ProductImages ProductImage[]
  CartItem      CartItem[]
  // category      String
  // createdAt     DateTime       @default(now())

  // @@index([category], name: "category")
  // @@index([user], name: "user")
}


// model GoogleMapsLocation {
//   googlePlacesId String
//   id             String        @id @default(cuid())
//   name           String
//   // OrderDetail    OrderDetail[]
// }

// model OrderDetail {

//   id                   String              @id @default(cuid())
//   address              String?
//   userId               String?
//   User                 User?               @relation(fields: [userId], references: [id])
//   // products          String[]
//   cartiteam            CartItem[]
//   payment_method       String
//   phone_number         String
//   // GoogleMapsLocation   GoogleMapsLocation? @relation(fields: [googleMapsLocationId], references: [id])

// }



