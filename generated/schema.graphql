### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AccountCreateManyUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: StringFilter
  id_token: StringNullableFilter
  oauth_token: StringNullableFilter
  oauth_token_secret: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  userId: StringFilter
}

input AccountUpdateManyMutationInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  oauth_token: NullableStringFieldUpdateOperationsInput
  oauth_token_secret: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  oauth_token: NullableStringFieldUpdateOperationsInput
  oauth_token_secret: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: StringFilter
  id_token: StringNullableFilter
  oauth_token: StringNullableFilter
  oauth_token_secret: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input AccountWhereUniqueInput {
  id: String
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
}

type AuthPayload {
  token: String
  user: User
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Cart {
  User: User!
  id: String!
  iteams(cursor: CartIteamWhereUniqueInput, skip: Int, take: Int): [CartIteam!]!
  userId: String!
}

input CartCreateNestedOneWithoutIteamsInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutIteamsInput
  create: CartCreateWithoutIteamsInput
}

input CartCreateOrConnectWithoutIteamsInput {
  create: CartCreateWithoutIteamsInput!
  where: CartWhereUniqueInput!
}

input CartCreateWithoutIteamsInput {
  User: UserCreateNestedOneWithoutCartInput!
  id: String
}

type CartIteam {
  Product: Product
  id: String!
  quantity: Int!
}

input CartIteamCreateNestedOneWithoutProductInput {
  connect: CartIteamWhereUniqueInput
  connectOrCreate: CartIteamCreateOrConnectWithoutProductInput
  create: CartIteamCreateWithoutProductInput
}

input CartIteamCreateOrConnectWithoutProductInput {
  create: CartIteamCreateWithoutProductInput!
  where: CartIteamWhereUniqueInput!
}

input CartIteamCreateWithoutProductInput {
  Cart: CartCreateNestedOneWithoutIteamsInput
  id: String
  quantity: Int!
}

input CartIteamListRelationFilter {
  every: CartIteamWhereInput
  none: CartIteamWhereInput
  some: CartIteamWhereInput
}

input CartIteamUpdateOneWithoutProductInput {
  connect: CartIteamWhereUniqueInput
  connectOrCreate: CartIteamCreateOrConnectWithoutProductInput
  create: CartIteamCreateWithoutProductInput
  delete: Boolean
  disconnect: Boolean
  update: CartIteamUpdateWithoutProductInput
  upsert: CartIteamUpsertWithoutProductInput
}

input CartIteamUpdateWithoutProductInput {
  Cart: CartUpdateOneWithoutIteamsInput
  id: StringFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input CartIteamUpsertWithoutProductInput {
  create: CartIteamCreateWithoutProductInput!
  update: CartIteamUpdateWithoutProductInput!
}

input CartIteamWhereInput {
  AND: [CartIteamWhereInput!]
  Cart: CartWhereInput
  NOT: [CartIteamWhereInput!]
  OR: [CartIteamWhereInput!]
  Product: ProductWhereInput
  cartId: StringNullableFilter
  id: StringFilter
  quantity: IntFilter
}

input CartIteamWhereUniqueInput {
  id: String
}

input CartUpdateOneWithoutIteamsInput {
  connect: CartWhereUniqueInput
  connectOrCreate: CartCreateOrConnectWithoutIteamsInput
  create: CartCreateWithoutIteamsInput
  delete: Boolean
  disconnect: Boolean
  update: CartUpdateWithoutIteamsInput
  upsert: CartUpsertWithoutIteamsInput
}

input CartUpdateWithoutIteamsInput {
  User: UserUpdateOneRequiredWithoutCartInput
  id: StringFieldUpdateOperationsInput
}

input CartUpsertWithoutIteamsInput {
  create: CartCreateWithoutIteamsInput!
  update: CartUpdateWithoutIteamsInput!
}

input CartWhereInput {
  AND: [CartWhereInput!]
  NOT: [CartWhereInput!]
  OR: [CartWhereInput!]
  User: UserWhereInput
  id: StringFilter
  iteams: CartIteamListRelationFilter
  userId: StringFilter
}

input CartWhereUniqueInput {
  id: String
  userId: String
}

type Category {
  catagoryImage: [String!]!
  id: String!
  name: String!
  seoTags: String!
  slug: String!
  status: String!
  sub_Catagory(cursor: sub_catagoryWhereUniqueInput, skip: Int, take: Int): [sub_catagory!]!
}

input CategoryCreateInput {
  catagoryImage: CategoryCreatecatagoryImageInput
  createdAt: DateTime
  id: String
  name: String!
  seoTags: String!
  slug: String!
  status: String!
  sub_Catagory: sub_catagoryCreateNestedManyWithoutCatagoryInput
  updatedAt: DateTime
}

input CategoryCreateNestedOneWithoutSub_CatagoryInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutSub_CatagoryInput
  create: CategoryCreateWithoutSub_CatagoryInput
}

input CategoryCreateOrConnectWithoutSub_CatagoryInput {
  create: CategoryCreateWithoutSub_CatagoryInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutSub_CatagoryInput {
  catagoryImage: CategoryCreatecatagoryImageInput
  createdAt: DateTime
  id: String
  name: String!
  seoTags: String!
  slug: String!
  status: String!
  updatedAt: DateTime
}

input CategoryCreatecatagoryImageInput {
  set: [String!]
}

input CategoryUpdateInput {
  catagoryImage: CategoryUpdatecatagoryImageInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  seoTags: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  sub_Catagory: sub_catagoryUpdateManyWithoutCatagoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutSub_CatagoryInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutSub_CatagoryInput
  create: CategoryCreateWithoutSub_CatagoryInput
  update: CategoryUpdateWithoutSub_CatagoryInput
  upsert: CategoryUpsertWithoutSub_CatagoryInput
}

input CategoryUpdateWithoutSub_CatagoryInput {
  catagoryImage: CategoryUpdatecatagoryImageInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  seoTags: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdatecatagoryImageInput {
  push: String
  set: [String!]
}

input CategoryUpsertWithoutSub_CatagoryInput {
  create: CategoryCreateWithoutSub_CatagoryInput!
  update: CategoryUpdateWithoutSub_CatagoryInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  catagoryImage: StringNullableListFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  seoTags: StringFilter
  slug: StringFilter
  status: StringFilter
  sub_Catagory: Sub_catagoryListRelationFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: String
  name: String
  slug: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnquiredProductListRelationFilter {
  every: enquiredProductWhereInput
  none: enquiredProductWhereInput
  some: enquiredProductWhereInput
}

input EnumUser_roleFieldUpdateOperationsInput {
  set: User_role
}

input EnumUser_roleFilter {
  equals: User_role
  in: [User_role!]
  not: NestedEnumUser_roleFilter
  notIn: [User_role!]
}

input EnumUser_statusFieldUpdateOperationsInput {
  set: User_status
}

input EnumUser_statusFilter {
  equals: User_status
  in: [User_status!]
  not: NestedEnumUser_statusFilter
  notIn: [User_status!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

scalar Json

input JsonNullableListFilter {
  equals: [Json!]
  has: Json
  hasEvery: [Json!]
  hasSome: [Json!]
  isEmpty: Boolean
}

type Mutation {
  S3ImageUpload(file: [Upload!]!): [String]!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneProduct(data: ProductCreateInput!): Product!
  createOnesub_catagory(data: sub_catagoryCreateInput!): sub_catagory!
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  deleteOnesub_catagory(where: sub_catagoryWhereUniqueInput!): sub_catagory
  signup(address: String!, contactNo: String, email: String!, name: String!, password: String!): AuthPayload
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateOnesub_catagory(data: sub_catagoryUpdateInput!, where: sub_catagoryWhereUniqueInput!): sub_catagory
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumUser_roleFilter {
  equals: User_role
  in: [User_role!]
  not: NestedEnumUser_roleFilter
  notIn: [User_role!]
}

input NestedEnumUser_statusFilter {
  equals: User_status
  in: [User_status!]
  not: NestedEnumUser_statusFilter
  notIn: [User_status!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Product {
  description: String!
  discount: Int
  id: String!
  name: String!
  price: Int
  productImage: [String!]!
  product_thumbnail: String!
  salePrice: Int
  seoTags: String!
  sku: String
  slug: String!
  status: String!
  subCatagory: sub_catagory
  unit: Int
  variants: [Json!]!
}

input ProductCreateInput {
  cartIteam: CartIteamCreateNestedOneWithoutProductInput
  description: String!
  discount: Int
  enquiredProduct: enquiredProductCreateNestedOneWithoutProductnameInput
  id: String
  name: String!
  price: Int
  productImage: ProductCreateproductImageInput
  product_thumbnail: String!
  salePrice: Int
  seoTags: String!
  sku: String
  slug: String!
  status: String!
  subCatagory: sub_catagoryCreateNestedOneWithoutProductsInput
  unit: Int
  updatedAt: DateTime
  variants: ProductCreatevariantsInput
}

input ProductCreateManySubCatagoryInput {
  cartid: String
  description: String!
  discount: Int
  enquiredProductId: String
  id: String
  name: String!
  price: Int
  productImage: ProductCreateManyproductImageInput
  product_thumbnail: String!
  salePrice: Int
  seoTags: String!
  sku: String
  slug: String!
  status: String!
  unit: Int
  updatedAt: DateTime
  variants: ProductCreateManyvariantsInput
}

input ProductCreateManySubCatagoryInputEnvelope {
  data: [ProductCreateManySubCatagoryInput!]
  skipDuplicates: Boolean
}

input ProductCreateManyproductImageInput {
  set: [String!]
}

input ProductCreateManyvariantsInput {
  set: [Json!]
}

input ProductCreateNestedManyWithoutSubCatagoryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutSubCatagoryInput!]
  create: [ProductCreateWithoutSubCatagoryInput!]
  createMany: ProductCreateManySubCatagoryInputEnvelope
}

input ProductCreateOrConnectWithoutSubCatagoryInput {
  create: ProductCreateWithoutSubCatagoryInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutSubCatagoryInput {
  cartIteam: CartIteamCreateNestedOneWithoutProductInput
  description: String!
  discount: Int
  enquiredProduct: enquiredProductCreateNestedOneWithoutProductnameInput
  id: String
  name: String!
  price: Int
  productImage: ProductCreateproductImageInput
  product_thumbnail: String!
  salePrice: Int
  seoTags: String!
  sku: String
  slug: String!
  status: String!
  unit: Int
  updatedAt: DateTime
  variants: ProductCreatevariantsInput
}

input ProductCreateproductImageInput {
  set: [String!]
}

input ProductCreatevariantsInput {
  set: [Json!]
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  cartid: StringNullableFilter
  description: StringFilter
  discount: IntNullableFilter
  enquiredProductId: StringNullableFilter
  id: StringFilter
  name: StringFilter
  price: IntNullableFilter
  productImage: StringNullableListFilter
  product_thumbnail: StringFilter
  salePrice: IntNullableFilter
  seoTags: StringFilter
  sku: StringNullableFilter
  slug: StringFilter
  status: StringFilter
  subcatagoryId: StringFilter
  unit: IntNullableFilter
  updatedAt: DateTimeFilter
  variants: JsonNullableListFilter
}

input ProductUpdateInput {
  cartIteam: CartIteamUpdateOneWithoutProductInput
  description: StringFieldUpdateOperationsInput
  discount: NullableIntFieldUpdateOperationsInput
  enquiredProduct: enquiredProductUpdateOneWithoutProductnameInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  productImage: ProductUpdateproductImageInput
  product_thumbnail: StringFieldUpdateOperationsInput
  salePrice: NullableIntFieldUpdateOperationsInput
  seoTags: StringFieldUpdateOperationsInput
  sku: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  subCatagory: sub_catagoryUpdateOneWithoutProductsInput
  unit: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ProductUpdatevariantsInput
}

input ProductUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  discount: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  productImage: ProductUpdateproductImageInput
  product_thumbnail: StringFieldUpdateOperationsInput
  salePrice: NullableIntFieldUpdateOperationsInput
  seoTags: StringFieldUpdateOperationsInput
  sku: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  unit: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ProductUpdatevariantsInput
}

input ProductUpdateManyWithWhereWithoutSubCatagoryInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutSubCatagoryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutSubCatagoryInput!]
  create: [ProductCreateWithoutSubCatagoryInput!]
  createMany: ProductCreateManySubCatagoryInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutSubCatagoryInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutSubCatagoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutSubCatagoryInput!]
}

input ProductUpdateWithWhereUniqueWithoutSubCatagoryInput {
  data: ProductUpdateWithoutSubCatagoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutSubCatagoryInput {
  cartIteam: CartIteamUpdateOneWithoutProductInput
  description: StringFieldUpdateOperationsInput
  discount: NullableIntFieldUpdateOperationsInput
  enquiredProduct: enquiredProductUpdateOneWithoutProductnameInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  productImage: ProductUpdateproductImageInput
  product_thumbnail: StringFieldUpdateOperationsInput
  salePrice: NullableIntFieldUpdateOperationsInput
  seoTags: StringFieldUpdateOperationsInput
  sku: NullableStringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  unit: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variants: ProductUpdatevariantsInput
}

input ProductUpdateproductImageInput {
  push: String
  set: [String!]
}

input ProductUpdatevariantsInput {
  push: Json
  set: [Json!]
}

input ProductUpsertWithWhereUniqueWithoutSubCatagoryInput {
  create: ProductCreateWithoutSubCatagoryInput!
  update: ProductUpdateWithoutSubCatagoryInput!
  where: ProductWhereUniqueInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  cartIteam: CartIteamWhereInput
  cartid: StringNullableFilter
  description: StringFilter
  discount: IntNullableFilter
  enquiredProduct: enquiredProductWhereInput
  enquiredProductId: StringNullableFilter
  id: StringFilter
  name: StringFilter
  price: IntNullableFilter
  productImage: StringNullableListFilter
  product_thumbnail: StringFilter
  salePrice: IntNullableFilter
  seoTags: StringFilter
  sku: StringNullableFilter
  slug: StringFilter
  status: StringFilter
  subCatagory: sub_catagoryWhereInput
  subcatagoryId: StringFilter
  unit: IntNullableFilter
  updatedAt: DateTimeFilter
  variants: JsonNullableListFilter
}

input ProductWhereUniqueInput {
  cartid: String
  enquiredProductId: String
  id: String
  slug: String
}

type Product_Enquerie {
  EnquiredProducts(cursor: enquiredProductWhereUniqueInput, skip: Int, take: Int): [enquiredProduct!]!
  address: String
  company_name: String
  country: String
  email: String
  id: String!
  orderFrequency: String
  phoneNumber: String
  state: String
  unit: Int
}

input Product_EnquerieCreateNestedOneWithoutEnquiredProductsInput {
  connect: Product_EnquerieWhereUniqueInput
  connectOrCreate: Product_EnquerieCreateOrConnectWithoutEnquiredProductsInput
  create: Product_EnquerieCreateWithoutEnquiredProductsInput
}

input Product_EnquerieCreateOrConnectWithoutEnquiredProductsInput {
  create: Product_EnquerieCreateWithoutEnquiredProductsInput!
  where: Product_EnquerieWhereUniqueInput!
}

input Product_EnquerieCreateWithoutEnquiredProductsInput {
  address: String
  company_name: String
  country: String
  email: String
  id: String
  orderFrequency: String
  phoneNumber: String
  state: String
  unit: Int
}

input Product_EnquerieUpdateOneWithoutEnquiredProductsInput {
  connect: Product_EnquerieWhereUniqueInput
  connectOrCreate: Product_EnquerieCreateOrConnectWithoutEnquiredProductsInput
  create: Product_EnquerieCreateWithoutEnquiredProductsInput
  delete: Boolean
  disconnect: Boolean
  update: Product_EnquerieUpdateWithoutEnquiredProductsInput
  upsert: Product_EnquerieUpsertWithoutEnquiredProductsInput
}

input Product_EnquerieUpdateWithoutEnquiredProductsInput {
  address: NullableStringFieldUpdateOperationsInput
  company_name: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  orderFrequency: NullableStringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  state: NullableStringFieldUpdateOperationsInput
  unit: NullableIntFieldUpdateOperationsInput
}

input Product_EnquerieUpsertWithoutEnquiredProductsInput {
  create: Product_EnquerieCreateWithoutEnquiredProductsInput!
  update: Product_EnquerieUpdateWithoutEnquiredProductsInput!
}

input Product_EnquerieWhereInput {
  AND: [Product_EnquerieWhereInput!]
  EnquiredProducts: EnquiredProductListRelationFilter
  NOT: [Product_EnquerieWhereInput!]
  OR: [Product_EnquerieWhereInput!]
  address: StringNullableFilter
  company_name: StringNullableFilter
  country: StringNullableFilter
  email: StringNullableFilter
  id: StringFilter
  orderFrequency: StringNullableFilter
  phoneNumber: StringNullableFilter
  state: StringNullableFilter
  unit: IntNullableFilter
}

input Product_EnquerieWhereUniqueInput {
  id: String
}

type Query {
  categories(cursor: CategoryWhereUniqueInput, skip: Int, take: Int): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  product(where: ProductWhereUniqueInput!): Product
  products(cursor: ProductWhereUniqueInput, skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  subCatagories(cursor: sub_catagoryWhereUniqueInput, skip: Int, take: Int): [sub_catagory!]!
  subCatagory(where: sub_catagoryWhereUniqueInput!): sub_catagory
  user(where: UserWhereUniqueInput!): User
}

enum QueryMode {
  default
  insensitive
}

input SessionCreateManyUserInput {
  expires: DateTime!
  id: String
  sessionToken: String!
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  expires: DateTime!
  id: String
  sessionToken: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  userId: StringFilter
}

input SessionUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input SessionWhereUniqueInput {
  id: String
  sessionToken: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input Sub_catagoryListRelationFilter {
  every: sub_catagoryWhereInput
  none: sub_catagoryWhereInput
  some: sub_catagoryWhereInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  Cart: Cart
  address: String
  billing: String
  contactNumber: String
  email: String
  id: String!
  image: String
  name: String
  role: User_role!
  status: User_status!
}

input UserCreateNestedOneWithoutCartInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCartInput
  create: UserCreateWithoutCartInput
}

input UserCreateOrConnectWithoutCartInput {
  create: UserCreateWithoutCartInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCartInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  address: String
  billing: String
  contactNumber: String
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  password: String
  role: User_role
  sessions: SessionCreateNestedManyWithoutUserInput
  status: User_status
  varified: Boolean
}

input UserUpdateOneRequiredWithoutCartInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCartInput
  create: UserCreateWithoutCartInput
  update: UserUpdateWithoutCartInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateWithoutCartInput {
  accounts: AccountUpdateManyWithoutUserInput
  address: NullableStringFieldUpdateOperationsInput
  billing: NullableStringFieldUpdateOperationsInput
  contactNumber: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  role: EnumUser_roleFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserInput
  status: EnumUser_statusFieldUpdateOperationsInput
  varified: NullableBoolFieldUpdateOperationsInput
}

input UserUpsertWithoutCartInput {
  create: UserCreateWithoutCartInput!
  update: UserUpdateWithoutCartInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Cart: CartWhereInput
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  address: StringNullableFilter
  billing: StringNullableFilter
  contactNumber: StringNullableFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  image: StringNullableFilter
  name: StringNullableFilter
  password: StringNullableFilter
  role: EnumUser_roleFilter
  sessions: SessionListRelationFilter
  status: EnumUser_statusFilter
  varified: BoolNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

enum User_role {
  ADMIN
  DeliveryBoy
  MANAGER
  USER
}

enum User_status {
  ACTIVE
  BLOCKED
  INACTIVE
}

type enquiredProduct {
  id: String!
  productname: Product
  quantity: Int
}

input enquiredProductCreateNestedOneWithoutProductnameInput {
  connect: enquiredProductWhereUniqueInput
  connectOrCreate: enquiredProductCreateOrConnectWithoutProductnameInput
  create: enquiredProductCreateWithoutProductnameInput
}

input enquiredProductCreateOrConnectWithoutProductnameInput {
  create: enquiredProductCreateWithoutProductnameInput!
  where: enquiredProductWhereUniqueInput!
}

input enquiredProductCreateWithoutProductnameInput {
  id: String
  productEnquerie: Product_EnquerieCreateNestedOneWithoutEnquiredProductsInput
  quantity: Int
}

input enquiredProductUpdateOneWithoutProductnameInput {
  connect: enquiredProductWhereUniqueInput
  connectOrCreate: enquiredProductCreateOrConnectWithoutProductnameInput
  create: enquiredProductCreateWithoutProductnameInput
  delete: Boolean
  disconnect: Boolean
  update: enquiredProductUpdateWithoutProductnameInput
  upsert: enquiredProductUpsertWithoutProductnameInput
}

input enquiredProductUpdateWithoutProductnameInput {
  id: StringFieldUpdateOperationsInput
  productEnquerie: Product_EnquerieUpdateOneWithoutEnquiredProductsInput
  quantity: NullableIntFieldUpdateOperationsInput
}

input enquiredProductUpsertWithoutProductnameInput {
  create: enquiredProductCreateWithoutProductnameInput!
  update: enquiredProductUpdateWithoutProductnameInput!
}

input enquiredProductWhereInput {
  AND: [enquiredProductWhereInput!]
  NOT: [enquiredProductWhereInput!]
  OR: [enquiredProductWhereInput!]
  id: StringFilter
  productEnquerie: Product_EnquerieWhereInput
  product_EnquerieId: StringNullableFilter
  productname: ProductWhereInput
  quantity: IntNullableFilter
}

input enquiredProductWhereUniqueInput {
  id: String
}

type sub_catagory {
  Catagory: Category!
  Products(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  id: String!
  name: String!
  seoTags: String!
  slug: String!
  status: String!
  subCatagoryImage: [String!]!
}

input sub_catagoryCreateInput {
  Catagory: CategoryCreateNestedOneWithoutSub_CatagoryInput!
  Products: ProductCreateNestedManyWithoutSubCatagoryInput
  createdAt: DateTime
  id: String
  name: String!
  seoTags: String!
  slug: String!
  status: String!
  subCatagoryImage: sub_catagoryCreatesubCatagoryImageInput
  updatedAt: DateTime
}

input sub_catagoryCreateManyCatagoryInput {
  createdAt: DateTime
  id: String
  name: String!
  seoTags: String!
  slug: String!
  status: String!
  subCatagoryImage: sub_catagoryCreateManysubCatagoryImageInput
  updatedAt: DateTime
}

input sub_catagoryCreateManyCatagoryInputEnvelope {
  data: [sub_catagoryCreateManyCatagoryInput!]
  skipDuplicates: Boolean
}

input sub_catagoryCreateManysubCatagoryImageInput {
  set: [String!]
}

input sub_catagoryCreateNestedManyWithoutCatagoryInput {
  connect: [sub_catagoryWhereUniqueInput!]
  connectOrCreate: [sub_catagoryCreateOrConnectWithoutCatagoryInput!]
  create: [sub_catagoryCreateWithoutCatagoryInput!]
  createMany: sub_catagoryCreateManyCatagoryInputEnvelope
}

input sub_catagoryCreateNestedOneWithoutProductsInput {
  connect: sub_catagoryWhereUniqueInput
  connectOrCreate: sub_catagoryCreateOrConnectWithoutProductsInput
  create: sub_catagoryCreateWithoutProductsInput
}

input sub_catagoryCreateOrConnectWithoutCatagoryInput {
  create: sub_catagoryCreateWithoutCatagoryInput!
  where: sub_catagoryWhereUniqueInput!
}

input sub_catagoryCreateOrConnectWithoutProductsInput {
  create: sub_catagoryCreateWithoutProductsInput!
  where: sub_catagoryWhereUniqueInput!
}

input sub_catagoryCreateWithoutCatagoryInput {
  Products: ProductCreateNestedManyWithoutSubCatagoryInput
  createdAt: DateTime
  id: String
  name: String!
  seoTags: String!
  slug: String!
  status: String!
  subCatagoryImage: sub_catagoryCreatesubCatagoryImageInput
  updatedAt: DateTime
}

input sub_catagoryCreateWithoutProductsInput {
  Catagory: CategoryCreateNestedOneWithoutSub_CatagoryInput!
  createdAt: DateTime
  id: String
  name: String!
  seoTags: String!
  slug: String!
  status: String!
  subCatagoryImage: sub_catagoryCreatesubCatagoryImageInput
  updatedAt: DateTime
}

input sub_catagoryCreatesubCatagoryImageInput {
  set: [String!]
}

input sub_catagoryScalarWhereInput {
  AND: [sub_catagoryScalarWhereInput!]
  NOT: [sub_catagoryScalarWhereInput!]
  OR: [sub_catagoryScalarWhereInput!]
  catagoryid: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  seoTags: StringFilter
  slug: StringFilter
  status: StringFilter
  subCatagoryImage: StringNullableListFilter
  updatedAt: DateTimeFilter
}

input sub_catagoryUpdateInput {
  Catagory: CategoryUpdateOneRequiredWithoutSub_CatagoryInput
  Products: ProductUpdateManyWithoutSubCatagoryInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  seoTags: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  subCatagoryImage: sub_catagoryUpdatesubCatagoryImageInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input sub_catagoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  seoTags: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  subCatagoryImage: sub_catagoryUpdatesubCatagoryImageInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input sub_catagoryUpdateManyWithWhereWithoutCatagoryInput {
  data: sub_catagoryUpdateManyMutationInput!
  where: sub_catagoryScalarWhereInput!
}

input sub_catagoryUpdateManyWithoutCatagoryInput {
  connect: [sub_catagoryWhereUniqueInput!]
  connectOrCreate: [sub_catagoryCreateOrConnectWithoutCatagoryInput!]
  create: [sub_catagoryCreateWithoutCatagoryInput!]
  createMany: sub_catagoryCreateManyCatagoryInputEnvelope
  delete: [sub_catagoryWhereUniqueInput!]
  deleteMany: [sub_catagoryScalarWhereInput!]
  disconnect: [sub_catagoryWhereUniqueInput!]
  set: [sub_catagoryWhereUniqueInput!]
  update: [sub_catagoryUpdateWithWhereUniqueWithoutCatagoryInput!]
  updateMany: [sub_catagoryUpdateManyWithWhereWithoutCatagoryInput!]
  upsert: [sub_catagoryUpsertWithWhereUniqueWithoutCatagoryInput!]
}

input sub_catagoryUpdateOneWithoutProductsInput {
  connect: sub_catagoryWhereUniqueInput
  connectOrCreate: sub_catagoryCreateOrConnectWithoutProductsInput
  create: sub_catagoryCreateWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  update: sub_catagoryUpdateWithoutProductsInput
  upsert: sub_catagoryUpsertWithoutProductsInput
}

input sub_catagoryUpdateWithWhereUniqueWithoutCatagoryInput {
  data: sub_catagoryUpdateWithoutCatagoryInput!
  where: sub_catagoryWhereUniqueInput!
}

input sub_catagoryUpdateWithoutCatagoryInput {
  Products: ProductUpdateManyWithoutSubCatagoryInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  seoTags: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  subCatagoryImage: sub_catagoryUpdatesubCatagoryImageInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input sub_catagoryUpdateWithoutProductsInput {
  Catagory: CategoryUpdateOneRequiredWithoutSub_CatagoryInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  seoTags: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  subCatagoryImage: sub_catagoryUpdatesubCatagoryImageInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input sub_catagoryUpdatesubCatagoryImageInput {
  push: String
  set: [String!]
}

input sub_catagoryUpsertWithWhereUniqueWithoutCatagoryInput {
  create: sub_catagoryCreateWithoutCatagoryInput!
  update: sub_catagoryUpdateWithoutCatagoryInput!
  where: sub_catagoryWhereUniqueInput!
}

input sub_catagoryUpsertWithoutProductsInput {
  create: sub_catagoryCreateWithoutProductsInput!
  update: sub_catagoryUpdateWithoutProductsInput!
}

input sub_catagoryWhereInput {
  AND: [sub_catagoryWhereInput!]
  Catagory: CategoryWhereInput
  NOT: [sub_catagoryWhereInput!]
  OR: [sub_catagoryWhereInput!]
  Products: ProductListRelationFilter
  catagoryid: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  seoTags: StringFilter
  slug: StringFilter
  status: StringFilter
  subCatagoryImage: StringNullableListFilter
  updatedAt: DateTimeFilter
}

input sub_catagoryWhereUniqueInput {
  id: String
  name: String
  slug: String
}
